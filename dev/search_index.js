var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NBT","category":"page"},{"location":"#NBT","page":"Home","title":"NBT","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NBT.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NBT]","category":"page"},{"location":"#NBT.Tag","page":"Home","title":"NBT.Tag","text":"struct Tag{T}\n\nRepresents an NBT tag, containing an id, a name, and data.\n\nThe following are all values of T, ordered by id, starting from 0x1, and their corresponding names on the wiki:\n\n[UInt8, Int16, Int32, Int64, Float32, Float64, UInt8[],    String, Tag[], Tag[],    Int32[],   Int64[]   ]\n\n[Byte,  Short, Int,   Long,  Float,   Double,  Byte_Array, String, List,  Compound, Int_Array, Long_Array]\n\nProperties\n\nid::UInt8: The id of the tag. See minecraft wiki.\nname::String: The name of the tag.\ndata::T: The data in the tag. Its type is dictated by id. Do not use the wrong id-T combination or everything will break!\n\n\n\n\n\n","category":"type"},{"location":"#NBT.get_tags-Tuple{Tag, Integer}","page":"Home","title":"NBT.get_tags","text":"get_tags(tag, id::Integer; depth=10)\n\nReturns a Vector{Tag} containing all Tags in tag with id id, with an optional search depth limit.\n\nFor convenience, getindex is implemented, and only gets the first match on depth 1:\n\njulia> tag = read(\"./test/xd.litematic\", Tag);\n\njulia> tag[0x3] === get_tags(tag, 0x3; depth=1)[1]\ntrue\n\nSee also get_tags\n\n\n\n\n\n","category":"method"},{"location":"#NBT.get_tags-Tuple{Tag, String}","page":"Home","title":"NBT.get_tags","text":"get_tags(tag, name::String; depth=10)\n\nReturns a Vector{Tag} containing all Tags in tag named name, with an optional search depth limit.\n\nFor convenience, getindex is implemented, and only gets the first match on depth 1:\n\njulia> tag = read(\"./test/xd.litematic\", Tag);\n\njulia> tag[\"Version\"] === get_tags(tag, \"Version\"; depth=1)[1]\ntrue\n\nSee also get_tags\n\n\n\n\n\n","category":"method"},{"location":"#NBT.read_nbt_uncompressed-Tuple{IO, Type{Tag}}","page":"Home","title":"NBT.read_nbt_uncompressed","text":"read_nbt_uncompressed(io, ::Type{Tag})\n\nReads an nbt tag from an uncompressed IO. Not exported.\n\n\n\n\n\n","category":"method"},{"location":"#NBT.set_tags-Tuple{Tag, Integer, Tag}","page":"Home","title":"NBT.set_tags","text":"set_tags(tag, id::Integer, newtag; depth=10)\n\nSets all Tags in tag with id id to newtag, with an optional search depth limit.\n\nFor convenience, setindex! is implemented, and only sets the first match on depth 1:\n\njulia> tag = read(\"./test/xd.litematic\", Tag);\n\njulia> tag[0x3] = Tag(0x3, \"EEEE\", 69420)\nInt32 EEEE: 69420\n\nSee also get_tags\n\n\n\n\n\n","category":"method"},{"location":"#NBT.set_tags-Tuple{Tag, String, Tag}","page":"Home","title":"NBT.set_tags","text":"set_tags(tag, name::String, newtag; depth=10)\n\nSets all Tags in tag named name to newtag, with an optional search depth limit.\n\nFor convenience, setindex! is implemented, and only sets the first match on depth 1:\n\njulia> tag = read(\"./test/xd.litematic\", Tag);\n\njulia> tag[\"Version\"] = Tag(0x3, \"Version\", 69420)\nInt32 Version: 69420\n\nSee also get_tags\n\n\n\n\n\n","category":"method"},{"location":"#NBT.write_nbt_uncompressed-Tuple{IO, Tag}","page":"Home","title":"NBT.write_nbt_uncompressed","text":"write_nbt_uncompressed(io, tag)\n\nWrites an nbt tag to an uncompressed IO. Not exported.\n\n\n\n\n\n","category":"method"}]
}
